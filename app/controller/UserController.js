/*
 * File: app/controller/UserController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('smart.controller.UserController', {
    extend: 'Ext.app.Controller',

    onUserListItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var user=Ext.create('smart.view.UserDetail');
        user.show();
    },

    onConfirmUserAddClick: function(button, e, eOpts) {
        //----添加新用户
        var sform = button.up('form').getForm();

                                // Submit the Ajax request and handle the response
                                sform.submit({
                                    success: function(sform, action) {
                                       button.up('window').destroy();
                                         Ext.Msg.alert('Failed','添加成功');
                                    },
                                    failure: function(sform, action) {
                                        Ext.Msg.alert('Failed','添加失败');
                                    }
                                });

    },

    onCancenUserAddClick: function(button, e, eOpts) {
        button.up('window').destroy();
    },

    onAddNewUserClick: function(button, e, eOpts) {
        Ext.create('smart.view.AddNewUser').show();
    },

    onEditUserInfobtnClick: function(button, e, eOpts) {
        //开启Form的输入功能

        var fields=button.up('form').items;
        fields=fields.filter('isFormField',true);
        fields.each(function(it){
            it.setReadOnly(false);
        });
        //设置第一个FieldFocus

        fields.first().focus();

        //设置提交按钮可点击

        var submitbtn=button.nextSibling();
        submitbtn.setDisabled(false);
    },

    onDeleteSelectEquipmentbtnClick: function(button, e, eOpts) {
                var grid = button.up('window').down('grid');
                var select=grid.getSelectionModel().getSelection();
                if(select[0]){
                    grid.getStore().remove(select);
                }
        else{
            Ext.Msg.alert('','请先选择设备');
        }
    },

    onSubmitUserEditbtnClick: function(button, e, eOpts) {
         //提交对用户信息的修改
        var sform = button.up('form').getForm();

                                        // Submit the Ajax request and handle the response
                                        sform.submit({
                                            success: function(sform, action) {

                                                 Ext.Msg.alert('success','添加成功');
                                            },
                                            failure: function(sform, action) {
                                                Ext.Msg.alert('Failed','添加失败');
                                            }
                                        });
    },

    onEditSelectEquipmentbtnClick: function(button, e, eOpts) {
         //--编辑选中设备

        //注意：编辑选中设备和添加新设备使用的是同一个窗口！

        var grid = button.up('window').down('grid');
        var select=grid.getSelectionModel().getSelection()[0];

        if(select){
         var selectdata=select.getData();
        console.log(selectdata);

        //创建编辑设备窗口
        var win=Ext.create('smart.view.AddNewEquipment');
        win.setTitle('编辑设备');
        win.show();

        //赋值到表单中

        var form=win.down('form').getForm();

        form.setValues(selectdata);
        }
        else{
            Ext.Msg.alert('','请先选择设备');
        }

    },

    onCanfirmEquipmentAddClick: function(button, e, eOpts) {
        //确定添加新设备到用户
                    var sform = button.up('form').getForm();


                                  sform.submit({
                                      url:function(){
                                          //url需要根据标题确定是添加设备还是编辑设备
                                      },
                                                   success: function(sform, action) {
                                             button.up('window').destroy();
                                                         Ext.Msg.alert('success','成功');
                                                   },
                                                    failure: function(sform, action) {
                                                        Ext.Msg.alert('Failed','失败');
                                                   }
                                    });
    },

    onAddNewEquipmentClick: function(button, e, eOpts) {


                //创建编辑设备窗口
                var win=Ext.create('smart.view.AddNewEquipment');
                win.setTitle('添加设备到用户');
                win.show();

                //赋值到表单中

                var form=win.down('form');
                form.add({

                                   xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '用户ID',
                                    name: 'userid',
                    disabled:true
                });
            form.getForm().setValues({
                userid:'YLM007'
            });



    },

    onAllUserAfterRender: function(component, eOpts) {
        //加载用户的一般统计信息

        console.log(component);
        //获取管理员的个人信息
         Ext.Ajax.request({
                    url: 'UserAction',
                    params: {

                    },
                    success: function(response){
                        content = response.responseText;

                        //接收到的数据转化成Data对象，送给Form

                        var datejson=Ext.JSON.decode(content);
                        console.log(datejson);
                        component.getForm().setValues(datejson);

                    },
                    failure: function(response, opts) {
                        console.log('server-side failure with status code ' + response.status);
                    }
                });

    },

    init: function(application) {
        this.control({
            "#UserList": {
                itemdblclick: this.onUserListItemDblClick
            },
            "#ConfirmUserAdd": {
                click: this.onConfirmUserAddClick
            },
            "#CancenUserAdd": {
                click: this.onCancenUserAddClick
            },
            "#AddNewUser": {
                click: this.onAddNewUserClick
            },
            "#EditUserInfobtn": {
                click: this.onEditUserInfobtnClick
            },
            "#DeleteSelectEquipmentbtn": {
                click: this.onDeleteSelectEquipmentbtnClick
            },
            "#SubmitUserEditbtn": {
                click: this.onSubmitUserEditbtnClick
            },
            "#EditSelectEquipmentbtn": {
                click: this.onEditSelectEquipmentbtnClick
            },
            "#CanfirmEquipmentAdd": {
                click: this.onCanfirmEquipmentAddClick
            },
            "#AddNewEquipment": {
                click: this.onAddNewEquipmentClick
            },
            "#AllUser": {
                afterrender: this.onAllUserAfterRender
            }
        });
    }

});
